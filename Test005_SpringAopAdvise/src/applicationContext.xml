<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
           
	<bean id="personDao" class="com.example.dao.PersonDaoImpl"></bean>
	<bean id="transaction" class="com.example.dao.Transaction"></bean>
	
	<aop:config>
		<aop:pointcut 
			expression="execution(* com.example.dao.PersonDaoImpl.*(..))"
			id="perform"/>
		
		<aop:aspect ref="transaction">
			<!-- 前置通知：目标方法执行之前执行 -->
			<aop:before method="beginTransaction" pointcut-ref="perform"/>
			
			<!-- 后置通知：
				1、目标方法执行之后执行
				2、当目标方法产生异常，后置通知将不再继续执行，可以获取到异常返回值
			 -->
			<aop:after-returning method="commit" pointcut-ref="perform" returning="val"/>
			
			<!-- 最终通知：无论目标方法是否产生异常，都会执行 -->
			<aop:after method="finallyMethod" pointcut-ref="perform"/>
			
			<!-- 异常通知 -->
			<aop:after-throwing method="throwingMethod" throwing="throwable" pointcut-ref="perform"/>
			
			<!-- 
  	    		环绕通知
  	    		        能控制目标方法的执行
  	    		        前置通知和后置通知能在目标方法的前面和后面加一些代码，但是不能控制目标方法的执行
  	    	 -->
  	    	 <aop:around method="aroundMethod" pointcut-ref="perform"/>
		</aop:aspect>
	</aop:config>
</beans>
           

